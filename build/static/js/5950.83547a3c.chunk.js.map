{"version":3,"file":"static/js/5950.83547a3c.chunk.js","mappings":"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","sources":["containers/admin/Subscription.jsx"],"sourcesContent":["import moment from \"moment\";\r\nimport { useEffect, useState } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { showNotification } from \"../../components/admin/common/headerSlice\"\r\nimport TitleCard from \"../../components/admin/common/TitleCard\"\r\n//import { RECENT_TRANSACTIONS } from \"../../utils/dummyData\"\r\nimport { toast } from 'react-toastify';\r\nimport Nav from '../../components/admin/Nav';\r\nimport RightSidebar from '../../components/admin/common/RightSidebar';\r\nimport FunnelIcon from '@heroicons/react/24/outline/FunnelIcon'\r\nimport XMarkIcon from '@heroicons/react/24/outline/XMarkIcon'\r\nimport SearchBar from \"../../components/admin/common/SearchBar\";\r\nimport Header from \"../../components/admin/Header\";\r\nimport Footer from \"../../components/admin/Footer\";\r\nimport axios from \"axios\";\r\nimport { openModal } from '../../components/admin/common/modalSlice';\r\nimport { deleteLead, getLeadsContent,getSubscribersContent } from \"../../containers/admin/modal_slice/SubscriptionDetailsSlice\"\r\n//import { CONFIRMATION_MODAL_CLOSE_TYPES, MODAL_BODY_TYPES } from '../../utils/globalConstantUtil'\r\nimport { CONFIRMATION_MODAL_CLOSE_TYPES, MODAL_BODY_TYPES } from '../../components/admin/utils/globalConstantUtil';\r\n\r\n/*const TopSideButtons = ({removeFilter, applyFilter, applySearch}) => {\r\n\r\n    const [filterParam, setFilterParam] = useState(\"\")\r\n    const [searchText, setSearchText] = useState(\"\")\r\n    const locationFilters = [\"Paris\", \"London\", \"Canada\", \"Peru\", \"Tokyo\"]\r\n    \r\n    const showFiltersAndApply = (params) => {\r\n        applyFilter(params)\r\n        setFilterParam(params)\r\n    }\r\n\r\n    const removeAppliedFilter = () => {\r\n        removeFilter()\r\n        setFilterParam(\"\")\r\n        setSearchText(\"\")\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(searchText === \"\"){\r\n            removeAppliedFilter()\r\n        }else{\r\n            applySearch(searchText)\r\n        }\r\n    }, [searchText])\r\n\r\n    return(\r\n        <div className=\"inline-block float-right\">\r\n            <SearchBar searchText={searchText} styleClass=\"mr-4\" setSearchText={setSearchText}/>\r\n            {filterParam != \"\" && <button onClick={() => removeAppliedFilter()} className=\"btn btn-xs mr-2 btn-active btn-ghost normal-case\">{filterParam}<XMarkIcon className=\"w-4 ml-2\"/></button>}\r\n            <div className=\"dropdown dropdown-bottom dropdown-end\">\r\n                <label tabIndex={0} className=\"btn btn-sm btn-outline\"><FunnelIcon className=\"w-5 mr-2\"/>Filter</label>\r\n                <ul tabIndex={0} className=\"dropdown-content menu p-2 text-sm shadow bg-base-100 rounded-box w-52\">\r\n                    {\r\n                        locationFilters.map((l, k) => {\r\n                            return  <li key={k}><a href=\"#\" onClick={() => showFiltersAndApply(l)}>{l}</a></li>\r\n                        })\r\n                    }\r\n                    <div className=\"divider mt-0 mb-0\"></div>\r\n                    <li><a href=\"#\" onClick={() => removeAppliedFilter()}>Remove Filter</a></li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n}*/\r\n\r\n\r\nconst Subscription = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        //dispatch(getLeadsContent());\r\n        agentSubscription();\r\n    }, []);\r\n    const [agentsubscriptions, setAgentSubscriptions] = useState(\"\");\r\n    const subscriptionDetails = useSelector(state => state.subscriptionDetail);\r\n    //const [agentsubscriptions, setAgentSubscriptions] = useSelector(state => state.lead)\r\n    \r\n    const removeFilter = () => {\r\n        //setTrans(RECENT_TRANSACTIONS)\r\n    }\r\n    /***********************************************************************/\r\n    /***********************************************************************/\r\n    \r\n    /**\r\n     * Get Users courses list\r\n     * \r\n     */\r\n    const agentSubscription = () => {\r\n        axios.get('admin/agent-subscription').then(response => {\r\n                toast.dismiss();\r\n    \r\n                if (response.data) {\r\n                    console.log(response.data)\r\n                    if(response.data.status) {\r\n                        setAgentSubscriptions(response.data.data);\r\n                        console.log(response.data.data)\r\n                    }\r\n                    \r\n                }\r\n            }).catch(error => {\r\n                toast.dismiss();\r\n                if (error.response) {\r\n                    toast.error('Code is not available', { position: \"top-center\",autoClose: 3000 });\r\n                }\r\n            });\r\n        \r\n    }\r\n    /***********************************************************************/\r\n    /***********************************************************************/\r\n    const applyFilter = (params) => {\r\n        let filteredTransactions = agentsubscriptions.filter((t) => {return t.plan_name == params})\r\n        setAgentSubscriptions(filteredTransactions)\r\n    }\r\n    /***********************************************************************/\r\n    /***********************************************************************/\r\n    // Search according to name\r\n    const applySearch = (value) => {\r\n        let filteredTransactions = agentsubscriptions.filter((t) => {return t.plan_name.toLowerCase().includes(value.toLowerCase()) ||  t.plan_name.toLowerCase().includes(value.toLowerCase())})\r\n        setAgentSubscriptions(filteredTransactions)\r\n    }\r\n    /***********************************************************************/\r\n    /***********************************************************************/\r\n    const openAddNewLeadModal = (id) => {\r\n        dispatch(openModal({title : \"Subscription Details\", bodyType : MODAL_BODY_TYPES.SUBSCRIPTION_DETAIL,\r\n            extraObject : {message : `Are you sure you want to delete this lead?`, type : CONFIRMATION_MODAL_CLOSE_TYPES.LEAD_DELETE, id}}))\r\n        \r\n    }\r\n    /***********************************************************************/\r\n    /***********************************************************************/\r\n    return(\r\n        <>\r\n            <div className=\"drawer drawer-mobile\">\r\n                <input id=\"left-sidebar-drawer\" type=\"checkbox\" className=\"drawer-toggle\" />\r\n                <div className=\"drawer-content flex flex-col \">\r\n                    <Header/>\r\n                    {/*<TitleCard title=\"Subscription\" topMargin=\"mt-2\" TopSideButtons={<TopSideButtons applySearch={applySearch} applyFilter={applyFilter} removeFilter={removeFilter}/>}>*/}\r\n                    <TitleCard title=\"Subscription\" topMargin=\"mt-2\" TopSideButtons=\"\">\r\n                        {console.log('agentsubscriptions=',agentsubscriptions)}\r\n                        {/* Team Member list in table format loaded constant */}\r\n                        <div className=\"overflow-x-auto w-full\">\r\n                            <table className=\"table w-full\">\r\n                                <thead>\r\n                                <tr>\r\n                                    <th>Name</th>\r\n                                    <th>Payment mode</th>\r\n                                    <th>Payment Status</th>\r\n                                    <th>Amount</th>\r\n                                    <th>Is Recurring</th>\r\n                                    <th>Transaction Date</th>\r\n                                    <th>Actions</th>\r\n                                </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {agentsubscriptions && agentsubscriptions.map && agentsubscriptions.map((l, k) => {\r\n                                            return(\r\n                                                <tr key={k}>\r\n                                                    <td>\r\n                                                    {/* <p className=\"font-bold\">{l.plan_name}</p> */}\r\n                                                    {l.plan_name}\r\n                                                    </td>\r\n                                                    <td>{l.payment_mode}</td>\r\n                                                    <td>{l.payment_status}</td>\r\n                                                    <td>R{l.amount}</td>\r\n                                                    <td>{l.is_recurring}</td>\r\n                                                    <td>{moment(l.createdAt).format(\"YYYY-MM-DD\")}</td>\r\n                                                    <td><a href=\"#\" className=\"inline-block px-4 py-3 text-sm font-semibold text-center text-white uppercase transition duration-200 ease-in-out bg-indigo-600 rounded-md cursor-pointer hover:bg-indigo-700\" onClick={() => openAddNewLeadModal(l.id)}>View</a></td>\r\n                                                </tr>\r\n                                            )\r\n                                        })\r\n                                    \r\n                                    }\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </TitleCard>\r\n                </div>\r\n                <Nav/>\r\n            </div>\r\n            <RightSidebar />\r\n            <Footer/>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default Subscription"],"names":["Subscription","dispatch","useDispatch","useEffect","agentSubscription","agentsubscriptions","setAgentSubscriptions","useState","useSelector","state","subscriptionDetail","axios","get","then","response","toast","dismiss","data","console","log","status","catch","error","position","autoClose","_jsxs","_Fragment","children","className","_jsx","id","type","Header","TitleCard","title","topMargin","TopSideButtons","map","l","k","plan_name","payment_mode","payment_status","amount","is_recurring","moment","createdAt","format","href","onClick","openAddNewLeadModal","openModal","bodyType","MODAL_BODY_TYPES","SUBSCRIPTION_DETAIL","extraObject","message","CONFIRMATION_MODAL_CLOSE_TYPES","LEAD_DELETE","Nav","RightSidebar","Footer"],"sourceRoot":""}