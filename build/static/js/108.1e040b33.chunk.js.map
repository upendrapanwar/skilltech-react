{"version":3,"file":"static/js/108.1e040b33.chunk.js","mappings":"mRAoHA,UA3FuB,WACnB,IAQMA,GAAWC,EAAAA,EAAAA,MAGjBC,GAAkCC,EAAAA,EAAAA,UAAS,CACvCC,UAAW,IAAIC,KACfC,QAAS,IAAID,OACfE,GAAAC,EAAAA,EAAAA,GAAAN,EAAA,GAOIO,GAVUF,EAAA,GAAcA,EAAA,GAUbG,KAAKC,MAAMC,aAAaC,QAAQ,eAChCC,EAAAA,EAAAA,MACjBC,QAAQC,IAAI,YAAYP,GACxB,IAAAQ,GAA4Bd,EAAAA,EAAAA,WAAS,GAAMe,GAAAV,EAAAA,EAAAA,GAAAS,EAAA,GAC3CE,GADYD,EAAA,GAAYA,EAAA,IACgBf,EAAAA,EAAAA,UAAS,KAAGiB,GAAAZ,EAAAA,EAAAA,GAAAW,EAAA,GACpDE,GADmBD,EAAA,GAAiBA,EAAA,IACVjB,EAAAA,EAAAA,UAASM,EAAWA,EAASa,GAAK,OAAKC,GAAAf,EAAAA,EAAAA,GAAAa,EAAA,GAEjEG,GAFWD,EAAA,GAAWA,EAAA,IACLE,EAAAA,EAAAA,OACuCtB,EAAAA,EAAAA,UAAS,KAA1DuB,EAAsBF,EAAtBE,uBAAwBC,EAAqBH,EAArBG,sBAe/B,OAbAZ,QAAQC,IAAI,YAAYP,IACxBmB,EAAAA,EAAAA,YAAU,WACwB,KAA3BF,IAC8B,IAA1BC,GAA4BE,EAAAA,GAAoBC,QAAQJ,EAAwB,WACtD,IAA1BC,GAA4BE,EAAAA,GAAoBE,MAAOL,EAAwB,SAClF1B,GAASgC,EAAAA,EAAAA,OAEjB,GAAG,IACHC,EAAAA,GAAMC,aAMFC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,uBAAsBD,SAAA,EACjCE,EAAAA,EAAAA,KAAA,SAAOjB,GAAG,sBAAsBkB,KAAK,WAAWF,UAAU,mBAC1DH,EAAAA,EAAAA,MAAA,OAAKG,UAAU,gCAA+BD,SAAA,EAC1CE,EAAAA,EAAAA,KAACE,EAAAA,EAAM,KACPF,EAAAA,EAAAA,KAAA,QAAMD,UAAU,sDAiCpBC,EAAAA,EAAAA,KAACG,EAAAA,EAAG,QAERH,EAAAA,EAAAA,KAACI,EAAAA,EAAY,KACbJ,EAAAA,EAAAA,KAACK,EAAAA,EAAM,MAGnB,C,qCChHA,IAAeC,EAAAA,KAAaC,MAAM,CAC9BC,MAAOF,EAAAA,KAAaE,QAAQC,SAAS,qBACrCC,SAAUJ,EAAAA,KAAaG,SAAS,yBAAyBE,IAAI,EAAG,sDAAsDC,IAAI,GAAI,uD","sources":["containers/admin/AdminDashboard.jsx","validation-schemas/AdminLoginSchema.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Chart as ChartJS } from 'chart.js';\r\n\r\nimport { Link, useNavigate, useLocation } from \"react-router-dom\";\r\nimport Header from \"../../components/admin/Header\";\r\nimport Footer from \"../../components/admin/Footer\";\r\nimport AdminLoginSchema from '../../validation-schemas/AdminLoginSchema';\r\nimport { Formik } from 'formik';\r\nimport axios from \"axios\";\r\nimport { toast } from 'react-toastify';\r\nimport ErrorText from \"../../components/utility/ErrorText\";\r\nimport ArrowDownTrayIcon  from '@heroicons/react/24/outline/ArrowDownTrayIcon'\r\nimport ShareIcon  from '@heroicons/react/24/outline/ShareIcon'\r\nimport EnvelopeIcon  from '@heroicons/react/24/outline/EnvelopeIcon'\r\nimport EllipsisVerticalIcon  from '@heroicons/react/24/outline/EllipsisVerticalIcon'\r\nimport ArrowPathIcon from \"@heroicons/react/24/outline/ArrowPathIcon\";\r\nimport Datepicker from \"react-tailwindcss-datepicker\";\r\nimport SuspenseContent from '../SuspenseContent';\r\nimport Nav from '../../components/admin/Nav';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport  {  removeNotificationMessage } from \"../../components/admin/common/headerSlice\";\r\nimport RightSidebar from '../../components/admin/common/RightSidebar';\r\nimport {NotificationContainer, NotificationManager} from 'react-notifications';\r\nimport 'react-notifications/lib/notifications.css';\r\n\r\nconst AdminDashboard = () => {\r\n    const periodOptions = [\r\n        {name : \"Today\", value : \"TODAY\"},\r\n        {name : \"Yesterday\", value : \"YESTERDAY\"},\r\n        {name : \"This Week\", value : \"THIS_WEEK\"},\r\n        {name : \"Last Week\", value : \"LAST_WEEK\"},\r\n        {name : \"This Month\", value : \"THIS_MONTH\"},\r\n        {name : \"Last Month\", value : \"LAST_MONTH\"},\r\n    ]\r\n    const dispatch = useDispatch()\r\n    const statsData = [];\r\n\r\n    const [dateValue, setDateValue] = useState({ \r\n        startDate: new Date(), \r\n        endDate: new Date() \r\n    }); \r\n    \r\n    const handleDatePickerValueChange = (newValue) => {\r\n        console.log(\"newValue:\", newValue); \r\n        setDateValue(newValue); \r\n        //updateDashboardPeriod(newValue)\r\n    }\r\n    const authInfo = JSON.parse(localStorage.getItem(\"authInfo\"));\r\n    const location = useLocation();\r\n    console.log('authInfo=',authInfo);\r\n    let [loading, setLoading] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState(\"\");\r\n    let [userid, setUserid] = useState(authInfo ? authInfo.id : null);\r\n    const navigate = useNavigate();\r\n    const {newNotificationMessage, newNotificationStatus} = useState('')\r\n    \r\n    console.log('authInfo=',authInfo);\r\n    useEffect(() => {\r\n        if(newNotificationMessage !== \"\"){\r\n            if(newNotificationStatus === 1)NotificationManager.success(newNotificationMessage, 'Success')\r\n            if(newNotificationStatus === 0)NotificationManager.error( newNotificationMessage, 'Error')\r\n            dispatch(removeNotificationMessage())\r\n        }\r\n    }, []);\r\n    toast.configure();\r\n\r\n    /***********************************************************************/\r\n    /***********************************************************************/\r\n    \r\n    return (\r\n        <>\r\n            <div className=\"drawer drawer-mobile\">\r\n                <input id=\"left-sidebar-drawer\" type=\"checkbox\" className=\"drawer-toggle\" />\r\n                <div className=\"drawer-content flex flex-col \">\r\n                    <Header/>\r\n                    <main className=\"flex-1 overflow-y-auto pt-8 px-6  bg-base-200\">\r\n                \r\n                        {/*<div className=\"h-16\"></div>*/}\r\n                        {/*<div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\r\n                            <div className=\"\">\r\n                                <Datepicker \r\n                                    containerClassName=\"w-72 \" \r\n                                    value={dateValue} \r\n                                    theme={\"light\"}\r\n                                    inputClassName=\"input input-bordered w-72\" \r\n                                    popoverDirection={\"down\"}\r\n                                    toggleClassName=\"invisible\"\r\n                                    onChange={handleDatePickerValueChange} \r\n                                    showShortcuts={true} \r\n                                    primaryColor={\"white\"} \r\n                                /> \r\n                            \r\n                            </div>\r\n                            <div className=\"text-right \">\r\n                                <button className=\"btn btn-ghost btn-sm normal-case\"><ArrowPathIcon className=\"w-4 mr-2\"/>Refresh Data</button>\r\n                                <button className=\"btn btn-ghost btn-sm normal-case  ml-2\"><ShareIcon className=\"w-4 mr-2\"/>Share</button>\r\n\r\n                                <div className=\"dropdown dropdown-bottom dropdown-end  ml-2\">\r\n                                    <label tabIndex={0} className=\"btn btn-ghost btn-sm normal-case btn-square \"><EllipsisVerticalIcon className=\"w-5\"/></label>\r\n                                    <ul tabIndex={0} className=\"dropdown-content menu menu-compact  p-2 shadow bg-base-100 rounded-box w-52\">\r\n                                        <li><a><EnvelopeIcon className=\"w-4\"/>Email Digests</a></li>\r\n                                        <li><a><ArrowDownTrayIcon className=\"w-4\"/>Download</a></li>\r\n                                    </ul>\r\n                                </div>\r\n                            </div>\r\n                        </div>*/}\r\n                    </main>\r\n                </div>\r\n                <Nav/>\r\n            </div>\r\n            <RightSidebar />\r\n            <Footer/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AdminDashboard;\r\n","import * as Yup from 'yup';\n\nexport default Yup.object().shape({\n    email: Yup.string().email().required(\"Email is required\"),\n    password: Yup.string().required(\"Password is required.\").min(6, 'Password is too short - should be 6 chars minimum.').max(20, 'Password is too long - should be 20 chars maximum.')\n    //role: Yup.string().required(\"User Type is required\")\n})"],"names":["dispatch","useDispatch","_useState","useState","startDate","Date","endDate","_useState2","_slicedToArray","authInfo","JSON","parse","localStorage","getItem","useLocation","console","log","_useState3","_useState4","_useState5","_useState6","_useState7","id","_useState8","_useState9","useNavigate","newNotificationMessage","newNotificationStatus","useEffect","NotificationManager","success","error","removeNotificationMessage","toast","configure","_jsxs","_Fragment","children","className","_jsx","type","Header","Nav","RightSidebar","Footer","Yup","shape","email","required","password","min","max"],"sourceRoot":""}